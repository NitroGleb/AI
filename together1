import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error, accuracy_score, confusion_matrix
from joblib import dump, load

def prepare_billionaire_data():
    df = pd.read_csv('Billionaires Statistics Dataset.csv')
    
    if 'finalWorth' not in df.columns:
        raise ValueError("'finalWorth' column is missing from the dataset.")
    
    age_median = df['age'].median()
    df['age'] = df['age'].fillna(age_median)
    
    columns_to_drop = [
        'rank', 'personName', 'country', 'city', 'gender', 'birthDate',
        'lastName', 'firstName', 'birthYear', 'birthMonth', 'birthDay',
        'population_country', 'total_tax_rate_country', 
        'tax_revenue_country_country', 'life_expectancy_country',
        'gross_primary_education_enrollment_country',
        'gross_tertiary_education_enrollment', 'gdp_country', 
        'latitude_country', 'cpi_change_country', 'longitude_country',
        'state', 'date', 'title', 'source', 'selfMade', 'status',
        'cpi_country', 'countryOfCitizenship', 'residenceStateRegion', 
        'organization'
    ]
    
    df.drop(columns_to_drop, axis=1, inplace=True)
    
    label_encoder = LabelEncoder()
    for col in df.select_dtypes(include=['object']).columns:
        df[col] = label_encoder.fit_transform(df[col])
        
    target_column = 'finalWorth'
    features_columns = list(set(df.columns) - set([target_column]))
    
    X = df[features_columns]
    y = df[target_column]
    
    return X, y

def prepare_titanic_data():
    df = pd.read_csv('titanic.csv')
    
    drop_cols = ['PassengerId', 'Name', 'Ticket', 'Cabin']
    df.drop(drop_cols, axis=1, inplace=True)
    
    age_medians = df.groupby('Pclass')['Age'].transform('median')
    df['Age'] = df['Age'].fillna(age_medians)
    
    embarked_dummies = pd.get_dummies(df['Embarked'], prefix='Embarked', drop_first=True)
    df = pd.concat([df, embarked_dummies], axis=1)
    df.drop('Embarked', axis=1, inplace=True)
    
    sex_dummies = pd.get_dummies(df['Sex'], prefix='Sex', drop_first=True)
    df = pd.concat([df, sex_dummies], axis=1)
    df.drop('Sex', axis=1, inplace=True)
    
    X = df.drop('Survived', axis=1)
    y = df['Survived']
    
    return X, y

X_billionaire, y_billionaire = prepare_billionaire_data()
X_train_bil, X_test_bil, y_train_bil, y_test_bil = train_test_split(X_billionaire, y_billionaire, test_size=0.2, random_state=42)

knn_reg = KNeighborsRegressor(n_neighbors=5)
knn_reg.fit(X_train_bil, y_train_bil)

y_pred_bil = knn_reg.predict(X_test_bil)
mape = mean_absolute_percentage_error(y_test_bil, y_pred_bil)
mse = mean_squared_error(y_test_bil, y_pred_bil)

print(f'Billionaire Model Results:')
print(f'Mean Absolute Percentage Error (MAPE): {mape:.2f}%')
print(f'Mean Squared Error (MSE): {mse:.2f}')

X_titanic, y_titanic = prepare_titanic_data()
X_train_titan, X_test_titan, y_train_titan, y_test_titan = train_test_split(X_titanic, y_titanic, test_size=0.25, random_state=42)

sc = StandardScaler()
X_train_titan = sc.fit_transform(X_train_titan)
X_test_titan = sc.transform(X_test_titan)

knn_classifier = KNeighborsClassifier(n_neighbors=3)
knn_classifier.fit(X_train_titan, y_train_titan)

y_pred_titan = knn_classifier.predict(X_test_titan)
accuracy = accuracy_score(y_test_titan, y_pred_titan)
confusion_mat = confusion_matrix(y_test_titan, y_pred_titan)

print('\nTitanic Model Results:')
print(f'Accuracy: {accuracy:.2f}')
print(confusion_mat)
